# Generated by Django 4.2.16 on 2024-11-30 19:38

from django.conf import settings
import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields
import shop.apps.user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('main', '0003_createdefaultdata'),
    ]

    operations = [
        migrations.CreateModel(
            name='SellerRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Full Name')),
                ('shop_name', models.CharField(max_length=128, verbose_name='Shop Name')),
                ('shop_handle', models.SlugField(max_length=20, verbose_name='Shop Handle')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, db_index=True, max_length=254, null=True, verbose_name='Email Adderss')),
                ('gst_status', models.CharField(choices=[('Y', 'I have GST'), ('N', "I don't have GST"), ('E', 'I am expemted'), ('L', 'I will add later')], db_index=True, default='Y', max_length=2, verbose_name='GST Status')),
                ('gstin', models.CharField(blank=True, db_index=True, max_length=15, null=True, validators=[shop.apps.user.models.validate_length(15)], verbose_name='GSTIN Number')),
                ('gstin_verified', models.BooleanField(blank=True, default=False, null=True, verbose_name='GSTIN Verified by Admin')),
                ('pan', models.CharField(blank=True, db_index=True, max_length=10, null=True, validators=[shop.apps.user.models.validate_length(10)], verbose_name='PAN Number')),
                ('pan_verified', models.BooleanField(blank=True, default=False, null=True, verbose_name='PAN Number verified by Admin')),
                ('approved_on', models.DateTimeField(null=True, verbose_name='Approved On')),
                ('approval_notes', models.TextField(blank=True, null=True, verbose_name='Approval/Rejection Reasons')),
                ('approval_status', models.CharField(choices=[('P', 'Pending'), ('A', 'Approved'), ('T', 'Temporarily Rejected'), ('R', 'Rejected'), ('I', 'Inprogress')], db_index=True, default='I', max_length=2, verbose_name='Approval Status')),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_sellers', to=settings.AUTH_USER_MODEL)),
                ('pincode', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main.pincode')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='seller_registration', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SellerProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Product Service Name')),
                ('image', models.ImageField(storage=django.core.files.storage.FileSystemStorage(location='media'), upload_to='uploads/sellerreg/%Y/%m/%d', verbose_name='Product Image')),
                ('seller_reg', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='registration.sellerregistration')),
            ],
        ),
        migrations.AddConstraint(
            model_name='sellerregistration',
            constraint=models.UniqueConstraint(condition=models.Q(models.Q(('gstin', ''), _negated=True), ('gstin__isnull', False)), fields=('gstin',), name='unique_gstin_ifnotnull'),
        ),
        migrations.AddConstraint(
            model_name='sellerregistration',
            constraint=models.UniqueConstraint(condition=models.Q(models.Q(('pan', ''), _negated=True), ('pan__isnull', False)), fields=('pan',), name='unique_pan_insellerreg_ifnotnull'),
        ),
    ]
