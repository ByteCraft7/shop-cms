# Generated by Django 4.2.17 on 2024-12-24 04:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import oscar.models.fields
import shop.apps.main.storages
import shop.apps.seller.abstract_models
import shop.apps.user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('address', '0007_organizationaddress'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=128, unique=True, verbose_name='Shop Name')),
                ('handle', models.SlugField(max_length=20, unique=True, verbose_name='Shop Handle')),
                ('gstin', models.CharField(blank=True, db_index=True, max_length=15, null=True, validators=[shop.apps.user.models.validate_length(15)], verbose_name='GSTIN Number')),
                ('gstin_verified', models.BooleanField(default=False, verbose_name='GSTIN verified by Admin')),
                ('gstin_file', models.ImageField(null=True, storage=shop.apps.main.storages.ProtectedStorage(), upload_to=shop.apps.seller.abstract_models.gstin_upload_path, verbose_name='Photo or scan of GSTIN')),
                ('gstin_file_verified', models.BooleanField(default=False, verbose_name='Photo or scan of GSTIN has been verified by Admin')),
                ('pan', models.CharField(db_index=True, max_length=10, null=True, validators=[shop.apps.user.models.validate_length(10)], verbose_name='PAN Number')),
                ('pan_verified', models.BooleanField(default=False, verbose_name='PAN Number verified by Admin')),
                ('pan_file', models.ImageField(null=True, storage=shop.apps.main.storages.ProtectedStorage(), upload_to=shop.apps.seller.abstract_models.pan_upload_path, verbose_name='Photo or scan of PAN card')),
                ('pan_file_verified', models.BooleanField(default=False, verbose_name='Photo or scan of PAN card verified by Admin')),
                ('signature_file', models.ImageField(null=True, storage=shop.apps.main.storages.ProtectedStorage(), upload_to=shop.apps.seller.abstract_models.signature_upload_path, verbose_name='Photo or scan of signature')),
                ('signature_file_verified', models.BooleanField(default=False, verbose_name='Photo or scan of signature verified by Admin')),
                ('shipping_preference', models.CharField(choices=[('S', 'Self Shipping'), ('Z', 'zite69 Shipping (coming soon)')], default='S', max_length=1, verbose_name='Shipping Preference')),
                ('approved', models.BooleanField(default=False, verbose_name='Seller Approved by Admin')),
                ('approved_on', models.DateTimeField(null=True, verbose_name='When the Seller was approved')),
                ('admin', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='seller_admins', to=settings.AUTH_USER_MODEL, verbose_name='Shop Admin')),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_sellers', to=settings.AUTH_USER_MODEL)),
                ('ceo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='seller_ceos', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='seller', to=settings.AUTH_USER_MODEL, verbose_name='Seller User')),
            ],
            options={
                'verbose_name': 'Seller',
                'verbose_name_plural': 'Sellers',
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SellerPickupAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')], max_length=64, verbose_name='Title')),
                ('first_name', models.CharField(blank=True, max_length=255, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=255, verbose_name='Last name')),
                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),
                ('line2', models.CharField(blank=True, max_length=255, verbose_name='Second line of address')),
                ('line3', models.CharField(blank=True, max_length=255, verbose_name='Third line of address')),
                ('line4', models.CharField(blank=True, max_length=255, verbose_name='City')),
                ('state', models.CharField(blank=True, max_length=255, verbose_name='State/County')),
                ('postcode', oscar.models.fields.UppercaseCharField(blank=True, max_length=64, verbose_name='Post/Zip-code')),
                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='address.country', verbose_name='Country')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pickup_addresses', to='seller.seller', verbose_name='Seller')),
            ],
            options={
                'verbose_name': 'Seller Pickup Address',
                'verbose_name_plural': 'Seller Pickup Addresses',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SellerAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')], max_length=64, verbose_name='Title')),
                ('first_name', models.CharField(blank=True, max_length=255, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=255, verbose_name='Last name')),
                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),
                ('line2', models.CharField(blank=True, max_length=255, verbose_name='Second line of address')),
                ('line3', models.CharField(blank=True, max_length=255, verbose_name='Third line of address')),
                ('line4', models.CharField(blank=True, max_length=255, verbose_name='City')),
                ('state', models.CharField(blank=True, max_length=255, verbose_name='State/County')),
                ('postcode', oscar.models.fields.UppercaseCharField(blank=True, max_length=64, verbose_name='Post/Zip-code')),
                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='address.country', verbose_name='Country')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='seller.seller', verbose_name='Seller')),
            ],
            options={
                'verbose_name': 'Seller address',
                'verbose_name_plural': 'Seller addresses',
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='seller',
            constraint=models.UniqueConstraint(condition=models.Q(models.Q(('gstin', ''), _negated=True), ('gstin__isnull', False)), fields=('gstin',), name='unique_gstin_in_seller_ifnotnull'),
        ),
        migrations.AddConstraint(
            model_name='seller',
            constraint=models.UniqueConstraint(condition=models.Q(models.Q(('pan', ''), _negated=True), ('pan__isnull', False)), fields=('pan',), name='unique_pan_in_seller_ifnotnull'),
        ),
    ]
